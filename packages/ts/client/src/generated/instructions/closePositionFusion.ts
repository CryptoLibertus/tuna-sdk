/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TUNA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_POSITION_FUSION_DISCRIMINATOR = new Uint8Array([
  91, 149, 37, 23, 74, 118, 53, 119,
]);

export function getClosePositionFusionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_POSITION_FUSION_DISCRIMINATOR
  );
}

export type ClosePositionFusionInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountMintA extends string | IAccountMeta<string> = string,
  TAccountMintB extends string | IAccountMeta<string> = string,
  TAccountTokenProgramA extends string | IAccountMeta<string> = string,
  TAccountTokenProgramB extends string | IAccountMeta<string> = string,
  TAccountTunaPosition extends string | IAccountMeta<string> = string,
  TAccountTunaPositionMint extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAta extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAtaA extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAtaB extends string | IAccountMeta<string> = string,
  TAccountFusionammProgram extends string | IAccountMeta<string> = string,
  TAccountFusionPosition extends string | IAccountMeta<string> = string,
  TAccountToken2022Program extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMintA extends string
        ? ReadonlyAccount<TAccountMintA>
        : TAccountMintA,
      TAccountMintB extends string
        ? ReadonlyAccount<TAccountMintB>
        : TAccountMintB,
      TAccountTokenProgramA extends string
        ? ReadonlyAccount<TAccountTokenProgramA>
        : TAccountTokenProgramA,
      TAccountTokenProgramB extends string
        ? ReadonlyAccount<TAccountTokenProgramB>
        : TAccountTokenProgramB,
      TAccountTunaPosition extends string
        ? WritableAccount<TAccountTunaPosition>
        : TAccountTunaPosition,
      TAccountTunaPositionMint extends string
        ? WritableAccount<TAccountTunaPositionMint>
        : TAccountTunaPositionMint,
      TAccountTunaPositionAta extends string
        ? WritableAccount<TAccountTunaPositionAta>
        : TAccountTunaPositionAta,
      TAccountTunaPositionAtaA extends string
        ? WritableAccount<TAccountTunaPositionAtaA>
        : TAccountTunaPositionAtaA,
      TAccountTunaPositionAtaB extends string
        ? WritableAccount<TAccountTunaPositionAtaB>
        : TAccountTunaPositionAtaB,
      TAccountFusionammProgram extends string
        ? ReadonlyAccount<TAccountFusionammProgram>
        : TAccountFusionammProgram,
      TAccountFusionPosition extends string
        ? WritableAccount<TAccountFusionPosition>
        : TAccountFusionPosition,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      ...TRemainingAccounts,
    ]
  >;

export type ClosePositionFusionInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ClosePositionFusionInstructionDataArgs = {};

export function getClosePositionFusionInstructionDataEncoder(): Encoder<ClosePositionFusionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: CLOSE_POSITION_FUSION_DISCRIMINATOR,
    })
  );
}

export function getClosePositionFusionInstructionDataDecoder(): Decoder<ClosePositionFusionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClosePositionFusionInstructionDataCodec(): Codec<
  ClosePositionFusionInstructionDataArgs,
  ClosePositionFusionInstructionData
> {
  return combineCodec(
    getClosePositionFusionInstructionDataEncoder(),
    getClosePositionFusionInstructionDataDecoder()
  );
}

export type ClosePositionFusionInput<
  TAccountAuthority extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountTokenProgramA extends string = string,
  TAccountTokenProgramB extends string = string,
  TAccountTunaPosition extends string = string,
  TAccountTunaPositionMint extends string = string,
  TAccountTunaPositionAta extends string = string,
  TAccountTunaPositionAtaA extends string = string,
  TAccountTunaPositionAtaB extends string = string,
  TAccountFusionammProgram extends string = string,
  TAccountFusionPosition extends string = string,
  TAccountToken2022Program extends string = string,
> = {
  /**
   *
   * TUNA accounts
   *
   */
  authority: TransactionSigner<TAccountAuthority>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  tokenProgramA: Address<TAccountTokenProgramA>;
  tokenProgramB: Address<TAccountTokenProgramB>;
  tunaPosition: Address<TAccountTunaPosition>;
  tunaPositionMint: Address<TAccountTunaPositionMint>;
  tunaPositionAta: Address<TAccountTunaPositionAta>;
  tunaPositionAtaA: Address<TAccountTunaPositionAtaA>;
  tunaPositionAtaB: Address<TAccountTunaPositionAtaB>;
  /**
   *
   * Fusion accounts
   *
   */
  fusionammProgram: Address<TAccountFusionammProgram>;
  fusionPosition: Address<TAccountFusionPosition>;
  /**
   *
   * Other accounts
   *
   */
  token2022Program: Address<TAccountToken2022Program>;
};

export function getClosePositionFusionInstruction<
  TAccountAuthority extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountTokenProgramA extends string,
  TAccountTokenProgramB extends string,
  TAccountTunaPosition extends string,
  TAccountTunaPositionMint extends string,
  TAccountTunaPositionAta extends string,
  TAccountTunaPositionAtaA extends string,
  TAccountTunaPositionAtaB extends string,
  TAccountFusionammProgram extends string,
  TAccountFusionPosition extends string,
  TAccountToken2022Program extends string,
  TProgramAddress extends Address = typeof TUNA_PROGRAM_ADDRESS,
>(
  input: ClosePositionFusionInput<
    TAccountAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountTunaPosition,
    TAccountTunaPositionMint,
    TAccountTunaPositionAta,
    TAccountTunaPositionAtaA,
    TAccountTunaPositionAtaB,
    TAccountFusionammProgram,
    TAccountFusionPosition,
    TAccountToken2022Program
  >,
  config?: { programAddress?: TProgramAddress }
): ClosePositionFusionInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountMintA,
  TAccountMintB,
  TAccountTokenProgramA,
  TAccountTokenProgramB,
  TAccountTunaPosition,
  TAccountTunaPositionMint,
  TAccountTunaPositionAta,
  TAccountTunaPositionAtaA,
  TAccountTunaPositionAtaB,
  TAccountFusionammProgram,
  TAccountFusionPosition,
  TAccountToken2022Program
> {
  // Program address.
  const programAddress = config?.programAddress ?? TUNA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    tokenProgramA: { value: input.tokenProgramA ?? null, isWritable: false },
    tokenProgramB: { value: input.tokenProgramB ?? null, isWritable: false },
    tunaPosition: { value: input.tunaPosition ?? null, isWritable: true },
    tunaPositionMint: {
      value: input.tunaPositionMint ?? null,
      isWritable: true,
    },
    tunaPositionAta: { value: input.tunaPositionAta ?? null, isWritable: true },
    tunaPositionAtaA: {
      value: input.tunaPositionAtaA ?? null,
      isWritable: true,
    },
    tunaPositionAtaB: {
      value: input.tunaPositionAtaB ?? null,
      isWritable: true,
    },
    fusionammProgram: {
      value: input.fusionammProgram ?? null,
      isWritable: false,
    },
    fusionPosition: { value: input.fusionPosition ?? null, isWritable: true },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.tokenProgramA),
      getAccountMeta(accounts.tokenProgramB),
      getAccountMeta(accounts.tunaPosition),
      getAccountMeta(accounts.tunaPositionMint),
      getAccountMeta(accounts.tunaPositionAta),
      getAccountMeta(accounts.tunaPositionAtaA),
      getAccountMeta(accounts.tunaPositionAtaB),
      getAccountMeta(accounts.fusionammProgram),
      getAccountMeta(accounts.fusionPosition),
      getAccountMeta(accounts.token2022Program),
    ],
    programAddress,
    data: getClosePositionFusionInstructionDataEncoder().encode({}),
  } as ClosePositionFusionInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountTunaPosition,
    TAccountTunaPositionMint,
    TAccountTunaPositionAta,
    TAccountTunaPositionAtaA,
    TAccountTunaPositionAtaB,
    TAccountFusionammProgram,
    TAccountFusionPosition,
    TAccountToken2022Program
  >;

  return instruction;
}

export type ParsedClosePositionFusionInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     *
     * TUNA accounts
     *
     */

    authority: TAccountMetas[0];
    mintA: TAccountMetas[1];
    mintB: TAccountMetas[2];
    tokenProgramA: TAccountMetas[3];
    tokenProgramB: TAccountMetas[4];
    tunaPosition: TAccountMetas[5];
    tunaPositionMint: TAccountMetas[6];
    tunaPositionAta: TAccountMetas[7];
    tunaPositionAtaA: TAccountMetas[8];
    tunaPositionAtaB: TAccountMetas[9];
    /**
     *
     * Fusion accounts
     *
     */

    fusionammProgram: TAccountMetas[10];
    fusionPosition: TAccountMetas[11];
    /**
     *
     * Other accounts
     *
     */

    token2022Program: TAccountMetas[12];
  };
  data: ClosePositionFusionInstructionData;
};

export function parseClosePositionFusionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedClosePositionFusionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      mintA: getNextAccount(),
      mintB: getNextAccount(),
      tokenProgramA: getNextAccount(),
      tokenProgramB: getNextAccount(),
      tunaPosition: getNextAccount(),
      tunaPositionMint: getNextAccount(),
      tunaPositionAta: getNextAccount(),
      tunaPositionAtaA: getNextAccount(),
      tunaPositionAtaB: getNextAccount(),
      fusionammProgram: getNextAccount(),
      fusionPosition: getNextAccount(),
      token2022Program: getNextAccount(),
    },
    data: getClosePositionFusionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
