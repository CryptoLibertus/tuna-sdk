/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TUNA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getRemainingAccountsInfoDecoder,
  getRemainingAccountsInfoEncoder,
  type RemainingAccountsInfo,
  type RemainingAccountsInfoArgs,
} from '../types';

export const COLLECT_AND_COMPOUND_FEES_FUSION_DISCRIMINATOR = new Uint8Array([
  61, 213, 30, 201, 89, 220, 156, 13,
]);

export function getCollectAndCompoundFeesFusionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COLLECT_AND_COMPOUND_FEES_FUSION_DISCRIMINATOR
  );
}

export type CollectAndCompoundFeesFusionInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountTunaConfig extends string | IAccountMeta<string> = string,
  TAccountMintA extends string | IAccountMeta<string> = string,
  TAccountMintB extends string | IAccountMeta<string> = string,
  TAccountTokenProgramA extends string | IAccountMeta<string> = string,
  TAccountTokenProgramB extends string | IAccountMeta<string> = string,
  TAccountMarket extends string | IAccountMeta<string> = string,
  TAccountVaultA extends string | IAccountMeta<string> = string,
  TAccountVaultB extends string | IAccountMeta<string> = string,
  TAccountVaultAAta extends string | IAccountMeta<string> = string,
  TAccountVaultBAta extends string | IAccountMeta<string> = string,
  TAccountTunaPosition extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAta extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAtaA extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAtaB extends string | IAccountMeta<string> = string,
  TAccountFeeRecipientAtaA extends string | IAccountMeta<string> = string,
  TAccountFeeRecipientAtaB extends string | IAccountMeta<string> = string,
  TAccountPythOraclePriceFeedA extends string | IAccountMeta<string> = string,
  TAccountPythOraclePriceFeedB extends string | IAccountMeta<string> = string,
  TAccountFusionammProgram extends string | IAccountMeta<string> = string,
  TAccountFusionPool extends string | IAccountMeta<string> = string,
  TAccountFusionPosition extends string | IAccountMeta<string> = string,
  TAccountMemoProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTunaConfig extends string
        ? ReadonlyAccount<TAccountTunaConfig>
        : TAccountTunaConfig,
      TAccountMintA extends string
        ? ReadonlyAccount<TAccountMintA>
        : TAccountMintA,
      TAccountMintB extends string
        ? ReadonlyAccount<TAccountMintB>
        : TAccountMintB,
      TAccountTokenProgramA extends string
        ? ReadonlyAccount<TAccountTokenProgramA>
        : TAccountTokenProgramA,
      TAccountTokenProgramB extends string
        ? ReadonlyAccount<TAccountTokenProgramB>
        : TAccountTokenProgramB,
      TAccountMarket extends string
        ? WritableAccount<TAccountMarket>
        : TAccountMarket,
      TAccountVaultA extends string
        ? WritableAccount<TAccountVaultA>
        : TAccountVaultA,
      TAccountVaultB extends string
        ? WritableAccount<TAccountVaultB>
        : TAccountVaultB,
      TAccountVaultAAta extends string
        ? WritableAccount<TAccountVaultAAta>
        : TAccountVaultAAta,
      TAccountVaultBAta extends string
        ? WritableAccount<TAccountVaultBAta>
        : TAccountVaultBAta,
      TAccountTunaPosition extends string
        ? WritableAccount<TAccountTunaPosition>
        : TAccountTunaPosition,
      TAccountTunaPositionAta extends string
        ? ReadonlyAccount<TAccountTunaPositionAta>
        : TAccountTunaPositionAta,
      TAccountTunaPositionAtaA extends string
        ? WritableAccount<TAccountTunaPositionAtaA>
        : TAccountTunaPositionAtaA,
      TAccountTunaPositionAtaB extends string
        ? WritableAccount<TAccountTunaPositionAtaB>
        : TAccountTunaPositionAtaB,
      TAccountFeeRecipientAtaA extends string
        ? WritableAccount<TAccountFeeRecipientAtaA>
        : TAccountFeeRecipientAtaA,
      TAccountFeeRecipientAtaB extends string
        ? WritableAccount<TAccountFeeRecipientAtaB>
        : TAccountFeeRecipientAtaB,
      TAccountPythOraclePriceFeedA extends string
        ? ReadonlyAccount<TAccountPythOraclePriceFeedA>
        : TAccountPythOraclePriceFeedA,
      TAccountPythOraclePriceFeedB extends string
        ? ReadonlyAccount<TAccountPythOraclePriceFeedB>
        : TAccountPythOraclePriceFeedB,
      TAccountFusionammProgram extends string
        ? ReadonlyAccount<TAccountFusionammProgram>
        : TAccountFusionammProgram,
      TAccountFusionPool extends string
        ? WritableAccount<TAccountFusionPool>
        : TAccountFusionPool,
      TAccountFusionPosition extends string
        ? WritableAccount<TAccountFusionPosition>
        : TAccountFusionPosition,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CollectAndCompoundFeesFusionInstructionData = {
  discriminator: ReadonlyUint8Array;
  useLeverage: boolean;
  remainingAccountsInfo: RemainingAccountsInfo;
};

export type CollectAndCompoundFeesFusionInstructionDataArgs = {
  useLeverage: boolean;
  remainingAccountsInfo: RemainingAccountsInfoArgs;
};

export function getCollectAndCompoundFeesFusionInstructionDataEncoder(): Encoder<CollectAndCompoundFeesFusionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['useLeverage', getBooleanEncoder()],
      ['remainingAccountsInfo', getRemainingAccountsInfoEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: COLLECT_AND_COMPOUND_FEES_FUSION_DISCRIMINATOR,
    })
  );
}

export function getCollectAndCompoundFeesFusionInstructionDataDecoder(): Decoder<CollectAndCompoundFeesFusionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['useLeverage', getBooleanDecoder()],
    ['remainingAccountsInfo', getRemainingAccountsInfoDecoder()],
  ]);
}

export function getCollectAndCompoundFeesFusionInstructionDataCodec(): Codec<
  CollectAndCompoundFeesFusionInstructionDataArgs,
  CollectAndCompoundFeesFusionInstructionData
> {
  return combineCodec(
    getCollectAndCompoundFeesFusionInstructionDataEncoder(),
    getCollectAndCompoundFeesFusionInstructionDataDecoder()
  );
}

export type CollectAndCompoundFeesFusionInput<
  TAccountAuthority extends string = string,
  TAccountTunaConfig extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountTokenProgramA extends string = string,
  TAccountTokenProgramB extends string = string,
  TAccountMarket extends string = string,
  TAccountVaultA extends string = string,
  TAccountVaultB extends string = string,
  TAccountVaultAAta extends string = string,
  TAccountVaultBAta extends string = string,
  TAccountTunaPosition extends string = string,
  TAccountTunaPositionAta extends string = string,
  TAccountTunaPositionAtaA extends string = string,
  TAccountTunaPositionAtaB extends string = string,
  TAccountFeeRecipientAtaA extends string = string,
  TAccountFeeRecipientAtaB extends string = string,
  TAccountPythOraclePriceFeedA extends string = string,
  TAccountPythOraclePriceFeedB extends string = string,
  TAccountFusionammProgram extends string = string,
  TAccountFusionPool extends string = string,
  TAccountFusionPosition extends string = string,
  TAccountMemoProgram extends string = string,
> = {
  /**
   *
   * TUNA accounts
   *
   */
  authority: TransactionSigner<TAccountAuthority>;
  tunaConfig: Address<TAccountTunaConfig>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  tokenProgramA: Address<TAccountTokenProgramA>;
  tokenProgramB: Address<TAccountTokenProgramB>;
  market: Address<TAccountMarket>;
  vaultA: Address<TAccountVaultA>;
  vaultB: Address<TAccountVaultB>;
  vaultAAta: Address<TAccountVaultAAta>;
  vaultBAta: Address<TAccountVaultBAta>;
  tunaPosition: Address<TAccountTunaPosition>;
  tunaPositionAta: Address<TAccountTunaPositionAta>;
  tunaPositionAtaA: Address<TAccountTunaPositionAtaA>;
  tunaPositionAtaB: Address<TAccountTunaPositionAtaB>;
  feeRecipientAtaA: Address<TAccountFeeRecipientAtaA>;
  feeRecipientAtaB: Address<TAccountFeeRecipientAtaB>;
  pythOraclePriceFeedA: Address<TAccountPythOraclePriceFeedA>;
  pythOraclePriceFeedB: Address<TAccountPythOraclePriceFeedB>;
  /**
   *
   * Fusion accounts
   *
   */
  fusionammProgram: Address<TAccountFusionammProgram>;
  fusionPool: Address<TAccountFusionPool>;
  fusionPosition: Address<TAccountFusionPosition>;
  memoProgram: Address<TAccountMemoProgram>;
  useLeverage: CollectAndCompoundFeesFusionInstructionDataArgs['useLeverage'];
  remainingAccountsInfo: CollectAndCompoundFeesFusionInstructionDataArgs['remainingAccountsInfo'];
};

export function getCollectAndCompoundFeesFusionInstruction<
  TAccountAuthority extends string,
  TAccountTunaConfig extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountTokenProgramA extends string,
  TAccountTokenProgramB extends string,
  TAccountMarket extends string,
  TAccountVaultA extends string,
  TAccountVaultB extends string,
  TAccountVaultAAta extends string,
  TAccountVaultBAta extends string,
  TAccountTunaPosition extends string,
  TAccountTunaPositionAta extends string,
  TAccountTunaPositionAtaA extends string,
  TAccountTunaPositionAtaB extends string,
  TAccountFeeRecipientAtaA extends string,
  TAccountFeeRecipientAtaB extends string,
  TAccountPythOraclePriceFeedA extends string,
  TAccountPythOraclePriceFeedB extends string,
  TAccountFusionammProgram extends string,
  TAccountFusionPool extends string,
  TAccountFusionPosition extends string,
  TAccountMemoProgram extends string,
  TProgramAddress extends Address = typeof TUNA_PROGRAM_ADDRESS,
>(
  input: CollectAndCompoundFeesFusionInput<
    TAccountAuthority,
    TAccountTunaConfig,
    TAccountMintA,
    TAccountMintB,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountMarket,
    TAccountVaultA,
    TAccountVaultB,
    TAccountVaultAAta,
    TAccountVaultBAta,
    TAccountTunaPosition,
    TAccountTunaPositionAta,
    TAccountTunaPositionAtaA,
    TAccountTunaPositionAtaB,
    TAccountFeeRecipientAtaA,
    TAccountFeeRecipientAtaB,
    TAccountPythOraclePriceFeedA,
    TAccountPythOraclePriceFeedB,
    TAccountFusionammProgram,
    TAccountFusionPool,
    TAccountFusionPosition,
    TAccountMemoProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CollectAndCompoundFeesFusionInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountTunaConfig,
  TAccountMintA,
  TAccountMintB,
  TAccountTokenProgramA,
  TAccountTokenProgramB,
  TAccountMarket,
  TAccountVaultA,
  TAccountVaultB,
  TAccountVaultAAta,
  TAccountVaultBAta,
  TAccountTunaPosition,
  TAccountTunaPositionAta,
  TAccountTunaPositionAtaA,
  TAccountTunaPositionAtaB,
  TAccountFeeRecipientAtaA,
  TAccountFeeRecipientAtaB,
  TAccountPythOraclePriceFeedA,
  TAccountPythOraclePriceFeedB,
  TAccountFusionammProgram,
  TAccountFusionPool,
  TAccountFusionPosition,
  TAccountMemoProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TUNA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    tunaConfig: { value: input.tunaConfig ?? null, isWritable: false },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    tokenProgramA: { value: input.tokenProgramA ?? null, isWritable: false },
    tokenProgramB: { value: input.tokenProgramB ?? null, isWritable: false },
    market: { value: input.market ?? null, isWritable: true },
    vaultA: { value: input.vaultA ?? null, isWritable: true },
    vaultB: { value: input.vaultB ?? null, isWritable: true },
    vaultAAta: { value: input.vaultAAta ?? null, isWritable: true },
    vaultBAta: { value: input.vaultBAta ?? null, isWritable: true },
    tunaPosition: { value: input.tunaPosition ?? null, isWritable: true },
    tunaPositionAta: {
      value: input.tunaPositionAta ?? null,
      isWritable: false,
    },
    tunaPositionAtaA: {
      value: input.tunaPositionAtaA ?? null,
      isWritable: true,
    },
    tunaPositionAtaB: {
      value: input.tunaPositionAtaB ?? null,
      isWritable: true,
    },
    feeRecipientAtaA: {
      value: input.feeRecipientAtaA ?? null,
      isWritable: true,
    },
    feeRecipientAtaB: {
      value: input.feeRecipientAtaB ?? null,
      isWritable: true,
    },
    pythOraclePriceFeedA: {
      value: input.pythOraclePriceFeedA ?? null,
      isWritable: false,
    },
    pythOraclePriceFeedB: {
      value: input.pythOraclePriceFeedB ?? null,
      isWritable: false,
    },
    fusionammProgram: {
      value: input.fusionammProgram ?? null,
      isWritable: false,
    },
    fusionPool: { value: input.fusionPool ?? null, isWritable: true },
    fusionPosition: { value: input.fusionPosition ?? null, isWritable: true },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tunaConfig),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.tokenProgramA),
      getAccountMeta(accounts.tokenProgramB),
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.vaultA),
      getAccountMeta(accounts.vaultB),
      getAccountMeta(accounts.vaultAAta),
      getAccountMeta(accounts.vaultBAta),
      getAccountMeta(accounts.tunaPosition),
      getAccountMeta(accounts.tunaPositionAta),
      getAccountMeta(accounts.tunaPositionAtaA),
      getAccountMeta(accounts.tunaPositionAtaB),
      getAccountMeta(accounts.feeRecipientAtaA),
      getAccountMeta(accounts.feeRecipientAtaB),
      getAccountMeta(accounts.pythOraclePriceFeedA),
      getAccountMeta(accounts.pythOraclePriceFeedB),
      getAccountMeta(accounts.fusionammProgram),
      getAccountMeta(accounts.fusionPool),
      getAccountMeta(accounts.fusionPosition),
      getAccountMeta(accounts.memoProgram),
    ],
    programAddress,
    data: getCollectAndCompoundFeesFusionInstructionDataEncoder().encode(
      args as CollectAndCompoundFeesFusionInstructionDataArgs
    ),
  } as CollectAndCompoundFeesFusionInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountTunaConfig,
    TAccountMintA,
    TAccountMintB,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountMarket,
    TAccountVaultA,
    TAccountVaultB,
    TAccountVaultAAta,
    TAccountVaultBAta,
    TAccountTunaPosition,
    TAccountTunaPositionAta,
    TAccountTunaPositionAtaA,
    TAccountTunaPositionAtaB,
    TAccountFeeRecipientAtaA,
    TAccountFeeRecipientAtaB,
    TAccountPythOraclePriceFeedA,
    TAccountPythOraclePriceFeedB,
    TAccountFusionammProgram,
    TAccountFusionPool,
    TAccountFusionPosition,
    TAccountMemoProgram
  >;

  return instruction;
}

export type ParsedCollectAndCompoundFeesFusionInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     *
     * TUNA accounts
     *
     */

    authority: TAccountMetas[0];
    tunaConfig: TAccountMetas[1];
    mintA: TAccountMetas[2];
    mintB: TAccountMetas[3];
    tokenProgramA: TAccountMetas[4];
    tokenProgramB: TAccountMetas[5];
    market: TAccountMetas[6];
    vaultA: TAccountMetas[7];
    vaultB: TAccountMetas[8];
    vaultAAta: TAccountMetas[9];
    vaultBAta: TAccountMetas[10];
    tunaPosition: TAccountMetas[11];
    tunaPositionAta: TAccountMetas[12];
    tunaPositionAtaA: TAccountMetas[13];
    tunaPositionAtaB: TAccountMetas[14];
    feeRecipientAtaA: TAccountMetas[15];
    feeRecipientAtaB: TAccountMetas[16];
    pythOraclePriceFeedA: TAccountMetas[17];
    pythOraclePriceFeedB: TAccountMetas[18];
    /**
     *
     * Fusion accounts
     *
     */

    fusionammProgram: TAccountMetas[19];
    fusionPool: TAccountMetas[20];
    fusionPosition: TAccountMetas[21];
    memoProgram: TAccountMetas[22];
  };
  data: CollectAndCompoundFeesFusionInstructionData;
};

export function parseCollectAndCompoundFeesFusionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCollectAndCompoundFeesFusionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 23) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      tunaConfig: getNextAccount(),
      mintA: getNextAccount(),
      mintB: getNextAccount(),
      tokenProgramA: getNextAccount(),
      tokenProgramB: getNextAccount(),
      market: getNextAccount(),
      vaultA: getNextAccount(),
      vaultB: getNextAccount(),
      vaultAAta: getNextAccount(),
      vaultBAta: getNextAccount(),
      tunaPosition: getNextAccount(),
      tunaPositionAta: getNextAccount(),
      tunaPositionAtaA: getNextAccount(),
      tunaPositionAtaB: getNextAccount(),
      feeRecipientAtaA: getNextAccount(),
      feeRecipientAtaB: getNextAccount(),
      pythOraclePriceFeedA: getNextAccount(),
      pythOraclePriceFeedB: getNextAccount(),
      fusionammProgram: getNextAccount(),
      fusionPool: getNextAccount(),
      fusionPosition: getNextAccount(),
      memoProgram: getNextAccount(),
    },
    data: getCollectAndCompoundFeesFusionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
