/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TUNA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const OPEN_POSITION_FUSION_DISCRIMINATOR = new Uint8Array([
  78, 68, 77, 41, 132, 42, 34, 238,
]);

export function getOpenPositionFusionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    OPEN_POSITION_FUSION_DISCRIMINATOR
  );
}

export type OpenPositionFusionInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountMintA extends string | IAccountMeta<string> = string,
  TAccountMintB extends string | IAccountMeta<string> = string,
  TAccountTokenProgramA extends string | IAccountMeta<string> = string,
  TAccountTokenProgramB extends string | IAccountMeta<string> = string,
  TAccountMarket extends string | IAccountMeta<string> = string,
  TAccountTunaPosition extends string | IAccountMeta<string> = string,
  TAccountTunaPositionMint extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAta extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAtaA extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAtaB extends string | IAccountMeta<string> = string,
  TAccountFusionammProgram extends string | IAccountMeta<string> = string,
  TAccountFusionPool extends string | IAccountMeta<string> = string,
  TAccountFusionPosition extends string | IAccountMeta<string> = string,
  TAccountMetadataUpdateAuth extends string | IAccountMeta<string> = string,
  TAccountToken2022Program extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMintA extends string
        ? ReadonlyAccount<TAccountMintA>
        : TAccountMintA,
      TAccountMintB extends string
        ? ReadonlyAccount<TAccountMintB>
        : TAccountMintB,
      TAccountTokenProgramA extends string
        ? ReadonlyAccount<TAccountTokenProgramA>
        : TAccountTokenProgramA,
      TAccountTokenProgramB extends string
        ? ReadonlyAccount<TAccountTokenProgramB>
        : TAccountTokenProgramB,
      TAccountMarket extends string
        ? ReadonlyAccount<TAccountMarket>
        : TAccountMarket,
      TAccountTunaPosition extends string
        ? WritableAccount<TAccountTunaPosition>
        : TAccountTunaPosition,
      TAccountTunaPositionMint extends string
        ? WritableSignerAccount<TAccountTunaPositionMint> &
            IAccountSignerMeta<TAccountTunaPositionMint>
        : TAccountTunaPositionMint,
      TAccountTunaPositionAta extends string
        ? WritableAccount<TAccountTunaPositionAta>
        : TAccountTunaPositionAta,
      TAccountTunaPositionAtaA extends string
        ? WritableAccount<TAccountTunaPositionAtaA>
        : TAccountTunaPositionAtaA,
      TAccountTunaPositionAtaB extends string
        ? WritableAccount<TAccountTunaPositionAtaB>
        : TAccountTunaPositionAtaB,
      TAccountFusionammProgram extends string
        ? ReadonlyAccount<TAccountFusionammProgram>
        : TAccountFusionammProgram,
      TAccountFusionPool extends string
        ? ReadonlyAccount<TAccountFusionPool>
        : TAccountFusionPool,
      TAccountFusionPosition extends string
        ? WritableAccount<TAccountFusionPosition>
        : TAccountFusionPosition,
      TAccountMetadataUpdateAuth extends string
        ? ReadonlyAccount<TAccountMetadataUpdateAuth>
        : TAccountMetadataUpdateAuth,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type OpenPositionFusionInstructionData = {
  discriminator: ReadonlyUint8Array;
  tickLowerIndex: number;
  tickUpperIndex: number;
  tickStopLossIndex: number;
  tickTakeProfitIndex: number;
  flags: number;
};

export type OpenPositionFusionInstructionDataArgs = {
  tickLowerIndex: number;
  tickUpperIndex: number;
  tickStopLossIndex: number;
  tickTakeProfitIndex: number;
  flags: number;
};

export function getOpenPositionFusionInstructionDataEncoder(): Encoder<OpenPositionFusionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['tickLowerIndex', getI32Encoder()],
      ['tickUpperIndex', getI32Encoder()],
      ['tickStopLossIndex', getI32Encoder()],
      ['tickTakeProfitIndex', getI32Encoder()],
      ['flags', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: OPEN_POSITION_FUSION_DISCRIMINATOR })
  );
}

export function getOpenPositionFusionInstructionDataDecoder(): Decoder<OpenPositionFusionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['tickLowerIndex', getI32Decoder()],
    ['tickUpperIndex', getI32Decoder()],
    ['tickStopLossIndex', getI32Decoder()],
    ['tickTakeProfitIndex', getI32Decoder()],
    ['flags', getU32Decoder()],
  ]);
}

export function getOpenPositionFusionInstructionDataCodec(): Codec<
  OpenPositionFusionInstructionDataArgs,
  OpenPositionFusionInstructionData
> {
  return combineCodec(
    getOpenPositionFusionInstructionDataEncoder(),
    getOpenPositionFusionInstructionDataDecoder()
  );
}

export type OpenPositionFusionInput<
  TAccountAuthority extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountTokenProgramA extends string = string,
  TAccountTokenProgramB extends string = string,
  TAccountMarket extends string = string,
  TAccountTunaPosition extends string = string,
  TAccountTunaPositionMint extends string = string,
  TAccountTunaPositionAta extends string = string,
  TAccountTunaPositionAtaA extends string = string,
  TAccountTunaPositionAtaB extends string = string,
  TAccountFusionammProgram extends string = string,
  TAccountFusionPool extends string = string,
  TAccountFusionPosition extends string = string,
  TAccountMetadataUpdateAuth extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  /**
   *
   * TUNA accounts
   *
   */
  authority: TransactionSigner<TAccountAuthority>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  tokenProgramA: Address<TAccountTokenProgramA>;
  tokenProgramB: Address<TAccountTokenProgramB>;
  market: Address<TAccountMarket>;
  tunaPosition: Address<TAccountTunaPosition>;
  tunaPositionMint: TransactionSigner<TAccountTunaPositionMint>;
  tunaPositionAta: Address<TAccountTunaPositionAta>;
  tunaPositionAtaA: Address<TAccountTunaPositionAtaA>;
  tunaPositionAtaB: Address<TAccountTunaPositionAtaB>;
  /**
   *
   * Fusion AMM accounts
   *
   */
  fusionammProgram: Address<TAccountFusionammProgram>;
  fusionPool: Address<TAccountFusionPool>;
  fusionPosition: Address<TAccountFusionPosition>;
  metadataUpdateAuth: Address<TAccountMetadataUpdateAuth>;
  /**
   *
   * Other accounts
   *
   */
  token2022Program: Address<TAccountToken2022Program>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  tickLowerIndex: OpenPositionFusionInstructionDataArgs['tickLowerIndex'];
  tickUpperIndex: OpenPositionFusionInstructionDataArgs['tickUpperIndex'];
  tickStopLossIndex: OpenPositionFusionInstructionDataArgs['tickStopLossIndex'];
  tickTakeProfitIndex: OpenPositionFusionInstructionDataArgs['tickTakeProfitIndex'];
  flags: OpenPositionFusionInstructionDataArgs['flags'];
};

export function getOpenPositionFusionInstruction<
  TAccountAuthority extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountTokenProgramA extends string,
  TAccountTokenProgramB extends string,
  TAccountMarket extends string,
  TAccountTunaPosition extends string,
  TAccountTunaPositionMint extends string,
  TAccountTunaPositionAta extends string,
  TAccountTunaPositionAtaA extends string,
  TAccountTunaPositionAtaB extends string,
  TAccountFusionammProgram extends string,
  TAccountFusionPool extends string,
  TAccountFusionPosition extends string,
  TAccountMetadataUpdateAuth extends string,
  TAccountToken2022Program extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof TUNA_PROGRAM_ADDRESS,
>(
  input: OpenPositionFusionInput<
    TAccountAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountMarket,
    TAccountTunaPosition,
    TAccountTunaPositionMint,
    TAccountTunaPositionAta,
    TAccountTunaPositionAtaA,
    TAccountTunaPositionAtaB,
    TAccountFusionammProgram,
    TAccountFusionPool,
    TAccountFusionPosition,
    TAccountMetadataUpdateAuth,
    TAccountToken2022Program,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): OpenPositionFusionInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountMintA,
  TAccountMintB,
  TAccountTokenProgramA,
  TAccountTokenProgramB,
  TAccountMarket,
  TAccountTunaPosition,
  TAccountTunaPositionMint,
  TAccountTunaPositionAta,
  TAccountTunaPositionAtaA,
  TAccountTunaPositionAtaB,
  TAccountFusionammProgram,
  TAccountFusionPool,
  TAccountFusionPosition,
  TAccountMetadataUpdateAuth,
  TAccountToken2022Program,
  TAccountSystemProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TUNA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    tokenProgramA: { value: input.tokenProgramA ?? null, isWritable: false },
    tokenProgramB: { value: input.tokenProgramB ?? null, isWritable: false },
    market: { value: input.market ?? null, isWritable: false },
    tunaPosition: { value: input.tunaPosition ?? null, isWritable: true },
    tunaPositionMint: {
      value: input.tunaPositionMint ?? null,
      isWritable: true,
    },
    tunaPositionAta: { value: input.tunaPositionAta ?? null, isWritable: true },
    tunaPositionAtaA: {
      value: input.tunaPositionAtaA ?? null,
      isWritable: true,
    },
    tunaPositionAtaB: {
      value: input.tunaPositionAtaB ?? null,
      isWritable: true,
    },
    fusionammProgram: {
      value: input.fusionammProgram ?? null,
      isWritable: false,
    },
    fusionPool: { value: input.fusionPool ?? null, isWritable: false },
    fusionPosition: { value: input.fusionPosition ?? null, isWritable: true },
    metadataUpdateAuth: {
      value: input.metadataUpdateAuth ?? null,
      isWritable: false,
    },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.tokenProgramA),
      getAccountMeta(accounts.tokenProgramB),
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.tunaPosition),
      getAccountMeta(accounts.tunaPositionMint),
      getAccountMeta(accounts.tunaPositionAta),
      getAccountMeta(accounts.tunaPositionAtaA),
      getAccountMeta(accounts.tunaPositionAtaB),
      getAccountMeta(accounts.fusionammProgram),
      getAccountMeta(accounts.fusionPool),
      getAccountMeta(accounts.fusionPosition),
      getAccountMeta(accounts.metadataUpdateAuth),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getOpenPositionFusionInstructionDataEncoder().encode(
      args as OpenPositionFusionInstructionDataArgs
    ),
  } as OpenPositionFusionInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMintA,
    TAccountMintB,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountMarket,
    TAccountTunaPosition,
    TAccountTunaPositionMint,
    TAccountTunaPositionAta,
    TAccountTunaPositionAtaA,
    TAccountTunaPositionAtaB,
    TAccountFusionammProgram,
    TAccountFusionPool,
    TAccountFusionPosition,
    TAccountMetadataUpdateAuth,
    TAccountToken2022Program,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ParsedOpenPositionFusionInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     *
     * TUNA accounts
     *
     */

    authority: TAccountMetas[0];
    mintA: TAccountMetas[1];
    mintB: TAccountMetas[2];
    tokenProgramA: TAccountMetas[3];
    tokenProgramB: TAccountMetas[4];
    market: TAccountMetas[5];
    tunaPosition: TAccountMetas[6];
    tunaPositionMint: TAccountMetas[7];
    tunaPositionAta: TAccountMetas[8];
    tunaPositionAtaA: TAccountMetas[9];
    tunaPositionAtaB: TAccountMetas[10];
    /**
     *
     * Fusion AMM accounts
     *
     */

    fusionammProgram: TAccountMetas[11];
    fusionPool: TAccountMetas[12];
    fusionPosition: TAccountMetas[13];
    metadataUpdateAuth: TAccountMetas[14];
    /**
     *
     * Other accounts
     *
     */

    token2022Program: TAccountMetas[15];
    systemProgram: TAccountMetas[16];
    associatedTokenProgram: TAccountMetas[17];
  };
  data: OpenPositionFusionInstructionData;
};

export function parseOpenPositionFusionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedOpenPositionFusionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 18) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      mintA: getNextAccount(),
      mintB: getNextAccount(),
      tokenProgramA: getNextAccount(),
      tokenProgramB: getNextAccount(),
      market: getNextAccount(),
      tunaPosition: getNextAccount(),
      tunaPositionMint: getNextAccount(),
      tunaPositionAta: getNextAccount(),
      tunaPositionAtaA: getNextAccount(),
      tunaPositionAtaB: getNextAccount(),
      fusionammProgram: getNextAccount(),
      fusionPool: getNextAccount(),
      fusionPosition: getNextAccount(),
      metadataUpdateAuth: getNextAccount(),
      token2022Program: getNextAccount(),
      systemProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getOpenPositionFusionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
