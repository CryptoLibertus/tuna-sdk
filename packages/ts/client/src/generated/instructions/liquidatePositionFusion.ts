/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TUNA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getRemainingAccountsInfoDecoder,
  getRemainingAccountsInfoEncoder,
  type RemainingAccountsInfo,
  type RemainingAccountsInfoArgs,
} from '../types';

export const LIQUIDATE_POSITION_FUSION_DISCRIMINATOR = new Uint8Array([
  57, 160, 162, 122, 114, 173, 138, 220,
]);

export function getLiquidatePositionFusionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    LIQUIDATE_POSITION_FUSION_DISCRIMINATOR
  );
}

export type LiquidatePositionFusionInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountTunaConfig extends string | IAccountMeta<string> = string,
  TAccountMintA extends string | IAccountMeta<string> = string,
  TAccountMintB extends string | IAccountMeta<string> = string,
  TAccountTokenProgramA extends string | IAccountMeta<string> = string,
  TAccountTokenProgramB extends string | IAccountMeta<string> = string,
  TAccountMarket extends string | IAccountMeta<string> = string,
  TAccountVaultA extends string | IAccountMeta<string> = string,
  TAccountVaultB extends string | IAccountMeta<string> = string,
  TAccountVaultAAta extends string | IAccountMeta<string> = string,
  TAccountVaultBAta extends string | IAccountMeta<string> = string,
  TAccountTunaPosition extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAta extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAtaA extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAtaB extends string | IAccountMeta<string> = string,
  TAccountLiquidationFeeRecipientAtaA extends
    | string
    | IAccountMeta<string> = string,
  TAccountLiquidationFeeRecipientAtaB extends
    | string
    | IAccountMeta<string> = string,
  TAccountPythOraclePriceFeedA extends string | IAccountMeta<string> = string,
  TAccountPythOraclePriceFeedB extends string | IAccountMeta<string> = string,
  TAccountFusionammProgram extends string | IAccountMeta<string> = string,
  TAccountFusionPool extends string | IAccountMeta<string> = string,
  TAccountFusionPosition extends string | IAccountMeta<string> = string,
  TAccountMemoProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTunaConfig extends string
        ? ReadonlyAccount<TAccountTunaConfig>
        : TAccountTunaConfig,
      TAccountMintA extends string
        ? ReadonlyAccount<TAccountMintA>
        : TAccountMintA,
      TAccountMintB extends string
        ? ReadonlyAccount<TAccountMintB>
        : TAccountMintB,
      TAccountTokenProgramA extends string
        ? ReadonlyAccount<TAccountTokenProgramA>
        : TAccountTokenProgramA,
      TAccountTokenProgramB extends string
        ? ReadonlyAccount<TAccountTokenProgramB>
        : TAccountTokenProgramB,
      TAccountMarket extends string
        ? WritableAccount<TAccountMarket>
        : TAccountMarket,
      TAccountVaultA extends string
        ? WritableAccount<TAccountVaultA>
        : TAccountVaultA,
      TAccountVaultB extends string
        ? WritableAccount<TAccountVaultB>
        : TAccountVaultB,
      TAccountVaultAAta extends string
        ? WritableAccount<TAccountVaultAAta>
        : TAccountVaultAAta,
      TAccountVaultBAta extends string
        ? WritableAccount<TAccountVaultBAta>
        : TAccountVaultBAta,
      TAccountTunaPosition extends string
        ? WritableAccount<TAccountTunaPosition>
        : TAccountTunaPosition,
      TAccountTunaPositionAta extends string
        ? WritableAccount<TAccountTunaPositionAta>
        : TAccountTunaPositionAta,
      TAccountTunaPositionAtaA extends string
        ? WritableAccount<TAccountTunaPositionAtaA>
        : TAccountTunaPositionAtaA,
      TAccountTunaPositionAtaB extends string
        ? WritableAccount<TAccountTunaPositionAtaB>
        : TAccountTunaPositionAtaB,
      TAccountLiquidationFeeRecipientAtaA extends string
        ? WritableAccount<TAccountLiquidationFeeRecipientAtaA>
        : TAccountLiquidationFeeRecipientAtaA,
      TAccountLiquidationFeeRecipientAtaB extends string
        ? WritableAccount<TAccountLiquidationFeeRecipientAtaB>
        : TAccountLiquidationFeeRecipientAtaB,
      TAccountPythOraclePriceFeedA extends string
        ? ReadonlyAccount<TAccountPythOraclePriceFeedA>
        : TAccountPythOraclePriceFeedA,
      TAccountPythOraclePriceFeedB extends string
        ? ReadonlyAccount<TAccountPythOraclePriceFeedB>
        : TAccountPythOraclePriceFeedB,
      TAccountFusionammProgram extends string
        ? ReadonlyAccount<TAccountFusionammProgram>
        : TAccountFusionammProgram,
      TAccountFusionPool extends string
        ? WritableAccount<TAccountFusionPool>
        : TAccountFusionPool,
      TAccountFusionPosition extends string
        ? WritableAccount<TAccountFusionPosition>
        : TAccountFusionPosition,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      ...TRemainingAccounts,
    ]
  >;

export type LiquidatePositionFusionInstructionData = {
  discriminator: ReadonlyUint8Array;
  withdrawPercent: number;
  remainingAccountsInfo: RemainingAccountsInfo;
};

export type LiquidatePositionFusionInstructionDataArgs = {
  withdrawPercent: number;
  remainingAccountsInfo: RemainingAccountsInfoArgs;
};

export function getLiquidatePositionFusionInstructionDataEncoder(): Encoder<LiquidatePositionFusionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['withdrawPercent', getU32Encoder()],
      ['remainingAccountsInfo', getRemainingAccountsInfoEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: LIQUIDATE_POSITION_FUSION_DISCRIMINATOR,
    })
  );
}

export function getLiquidatePositionFusionInstructionDataDecoder(): Decoder<LiquidatePositionFusionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['withdrawPercent', getU32Decoder()],
    ['remainingAccountsInfo', getRemainingAccountsInfoDecoder()],
  ]);
}

export function getLiquidatePositionFusionInstructionDataCodec(): Codec<
  LiquidatePositionFusionInstructionDataArgs,
  LiquidatePositionFusionInstructionData
> {
  return combineCodec(
    getLiquidatePositionFusionInstructionDataEncoder(),
    getLiquidatePositionFusionInstructionDataDecoder()
  );
}

export type LiquidatePositionFusionInput<
  TAccountAuthority extends string = string,
  TAccountTunaConfig extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountTokenProgramA extends string = string,
  TAccountTokenProgramB extends string = string,
  TAccountMarket extends string = string,
  TAccountVaultA extends string = string,
  TAccountVaultB extends string = string,
  TAccountVaultAAta extends string = string,
  TAccountVaultBAta extends string = string,
  TAccountTunaPosition extends string = string,
  TAccountTunaPositionAta extends string = string,
  TAccountTunaPositionAtaA extends string = string,
  TAccountTunaPositionAtaB extends string = string,
  TAccountLiquidationFeeRecipientAtaA extends string = string,
  TAccountLiquidationFeeRecipientAtaB extends string = string,
  TAccountPythOraclePriceFeedA extends string = string,
  TAccountPythOraclePriceFeedB extends string = string,
  TAccountFusionammProgram extends string = string,
  TAccountFusionPool extends string = string,
  TAccountFusionPosition extends string = string,
  TAccountMemoProgram extends string = string,
> = {
  /**
   *
   * TUNA accounts
   *
   */
  authority: TransactionSigner<TAccountAuthority>;
  tunaConfig: Address<TAccountTunaConfig>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  tokenProgramA: Address<TAccountTokenProgramA>;
  tokenProgramB: Address<TAccountTokenProgramB>;
  market: Address<TAccountMarket>;
  vaultA: Address<TAccountVaultA>;
  vaultB: Address<TAccountVaultB>;
  vaultAAta: Address<TAccountVaultAAta>;
  vaultBAta: Address<TAccountVaultBAta>;
  tunaPosition: Address<TAccountTunaPosition>;
  tunaPositionAta: Address<TAccountTunaPositionAta>;
  tunaPositionAtaA: Address<TAccountTunaPositionAtaA>;
  tunaPositionAtaB: Address<TAccountTunaPositionAtaB>;
  liquidationFeeRecipientAtaA: Address<TAccountLiquidationFeeRecipientAtaA>;
  liquidationFeeRecipientAtaB: Address<TAccountLiquidationFeeRecipientAtaB>;
  pythOraclePriceFeedA: Address<TAccountPythOraclePriceFeedA>;
  pythOraclePriceFeedB: Address<TAccountPythOraclePriceFeedB>;
  /**
   *
   * Fusion accounts
   *
   */
  fusionammProgram: Address<TAccountFusionammProgram>;
  fusionPool: Address<TAccountFusionPool>;
  fusionPosition: Address<TAccountFusionPosition>;
  memoProgram: Address<TAccountMemoProgram>;
  withdrawPercent: LiquidatePositionFusionInstructionDataArgs['withdrawPercent'];
  remainingAccountsInfo: LiquidatePositionFusionInstructionDataArgs['remainingAccountsInfo'];
};

export function getLiquidatePositionFusionInstruction<
  TAccountAuthority extends string,
  TAccountTunaConfig extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountTokenProgramA extends string,
  TAccountTokenProgramB extends string,
  TAccountMarket extends string,
  TAccountVaultA extends string,
  TAccountVaultB extends string,
  TAccountVaultAAta extends string,
  TAccountVaultBAta extends string,
  TAccountTunaPosition extends string,
  TAccountTunaPositionAta extends string,
  TAccountTunaPositionAtaA extends string,
  TAccountTunaPositionAtaB extends string,
  TAccountLiquidationFeeRecipientAtaA extends string,
  TAccountLiquidationFeeRecipientAtaB extends string,
  TAccountPythOraclePriceFeedA extends string,
  TAccountPythOraclePriceFeedB extends string,
  TAccountFusionammProgram extends string,
  TAccountFusionPool extends string,
  TAccountFusionPosition extends string,
  TAccountMemoProgram extends string,
  TProgramAddress extends Address = typeof TUNA_PROGRAM_ADDRESS,
>(
  input: LiquidatePositionFusionInput<
    TAccountAuthority,
    TAccountTunaConfig,
    TAccountMintA,
    TAccountMintB,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountMarket,
    TAccountVaultA,
    TAccountVaultB,
    TAccountVaultAAta,
    TAccountVaultBAta,
    TAccountTunaPosition,
    TAccountTunaPositionAta,
    TAccountTunaPositionAtaA,
    TAccountTunaPositionAtaB,
    TAccountLiquidationFeeRecipientAtaA,
    TAccountLiquidationFeeRecipientAtaB,
    TAccountPythOraclePriceFeedA,
    TAccountPythOraclePriceFeedB,
    TAccountFusionammProgram,
    TAccountFusionPool,
    TAccountFusionPosition,
    TAccountMemoProgram
  >,
  config?: { programAddress?: TProgramAddress }
): LiquidatePositionFusionInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountTunaConfig,
  TAccountMintA,
  TAccountMintB,
  TAccountTokenProgramA,
  TAccountTokenProgramB,
  TAccountMarket,
  TAccountVaultA,
  TAccountVaultB,
  TAccountVaultAAta,
  TAccountVaultBAta,
  TAccountTunaPosition,
  TAccountTunaPositionAta,
  TAccountTunaPositionAtaA,
  TAccountTunaPositionAtaB,
  TAccountLiquidationFeeRecipientAtaA,
  TAccountLiquidationFeeRecipientAtaB,
  TAccountPythOraclePriceFeedA,
  TAccountPythOraclePriceFeedB,
  TAccountFusionammProgram,
  TAccountFusionPool,
  TAccountFusionPosition,
  TAccountMemoProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TUNA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    tunaConfig: { value: input.tunaConfig ?? null, isWritable: false },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    tokenProgramA: { value: input.tokenProgramA ?? null, isWritable: false },
    tokenProgramB: { value: input.tokenProgramB ?? null, isWritable: false },
    market: { value: input.market ?? null, isWritable: true },
    vaultA: { value: input.vaultA ?? null, isWritable: true },
    vaultB: { value: input.vaultB ?? null, isWritable: true },
    vaultAAta: { value: input.vaultAAta ?? null, isWritable: true },
    vaultBAta: { value: input.vaultBAta ?? null, isWritable: true },
    tunaPosition: { value: input.tunaPosition ?? null, isWritable: true },
    tunaPositionAta: { value: input.tunaPositionAta ?? null, isWritable: true },
    tunaPositionAtaA: {
      value: input.tunaPositionAtaA ?? null,
      isWritable: true,
    },
    tunaPositionAtaB: {
      value: input.tunaPositionAtaB ?? null,
      isWritable: true,
    },
    liquidationFeeRecipientAtaA: {
      value: input.liquidationFeeRecipientAtaA ?? null,
      isWritable: true,
    },
    liquidationFeeRecipientAtaB: {
      value: input.liquidationFeeRecipientAtaB ?? null,
      isWritable: true,
    },
    pythOraclePriceFeedA: {
      value: input.pythOraclePriceFeedA ?? null,
      isWritable: false,
    },
    pythOraclePriceFeedB: {
      value: input.pythOraclePriceFeedB ?? null,
      isWritable: false,
    },
    fusionammProgram: {
      value: input.fusionammProgram ?? null,
      isWritable: false,
    },
    fusionPool: { value: input.fusionPool ?? null, isWritable: true },
    fusionPosition: { value: input.fusionPosition ?? null, isWritable: true },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tunaConfig),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.tokenProgramA),
      getAccountMeta(accounts.tokenProgramB),
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.vaultA),
      getAccountMeta(accounts.vaultB),
      getAccountMeta(accounts.vaultAAta),
      getAccountMeta(accounts.vaultBAta),
      getAccountMeta(accounts.tunaPosition),
      getAccountMeta(accounts.tunaPositionAta),
      getAccountMeta(accounts.tunaPositionAtaA),
      getAccountMeta(accounts.tunaPositionAtaB),
      getAccountMeta(accounts.liquidationFeeRecipientAtaA),
      getAccountMeta(accounts.liquidationFeeRecipientAtaB),
      getAccountMeta(accounts.pythOraclePriceFeedA),
      getAccountMeta(accounts.pythOraclePriceFeedB),
      getAccountMeta(accounts.fusionammProgram),
      getAccountMeta(accounts.fusionPool),
      getAccountMeta(accounts.fusionPosition),
      getAccountMeta(accounts.memoProgram),
    ],
    programAddress,
    data: getLiquidatePositionFusionInstructionDataEncoder().encode(
      args as LiquidatePositionFusionInstructionDataArgs
    ),
  } as LiquidatePositionFusionInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountTunaConfig,
    TAccountMintA,
    TAccountMintB,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountMarket,
    TAccountVaultA,
    TAccountVaultB,
    TAccountVaultAAta,
    TAccountVaultBAta,
    TAccountTunaPosition,
    TAccountTunaPositionAta,
    TAccountTunaPositionAtaA,
    TAccountTunaPositionAtaB,
    TAccountLiquidationFeeRecipientAtaA,
    TAccountLiquidationFeeRecipientAtaB,
    TAccountPythOraclePriceFeedA,
    TAccountPythOraclePriceFeedB,
    TAccountFusionammProgram,
    TAccountFusionPool,
    TAccountFusionPosition,
    TAccountMemoProgram
  >;

  return instruction;
}

export type ParsedLiquidatePositionFusionInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     *
     * TUNA accounts
     *
     */

    authority: TAccountMetas[0];
    tunaConfig: TAccountMetas[1];
    mintA: TAccountMetas[2];
    mintB: TAccountMetas[3];
    tokenProgramA: TAccountMetas[4];
    tokenProgramB: TAccountMetas[5];
    market: TAccountMetas[6];
    vaultA: TAccountMetas[7];
    vaultB: TAccountMetas[8];
    vaultAAta: TAccountMetas[9];
    vaultBAta: TAccountMetas[10];
    tunaPosition: TAccountMetas[11];
    tunaPositionAta: TAccountMetas[12];
    tunaPositionAtaA: TAccountMetas[13];
    tunaPositionAtaB: TAccountMetas[14];
    liquidationFeeRecipientAtaA: TAccountMetas[15];
    liquidationFeeRecipientAtaB: TAccountMetas[16];
    pythOraclePriceFeedA: TAccountMetas[17];
    pythOraclePriceFeedB: TAccountMetas[18];
    /**
     *
     * Fusion accounts
     *
     */

    fusionammProgram: TAccountMetas[19];
    fusionPool: TAccountMetas[20];
    fusionPosition: TAccountMetas[21];
    memoProgram: TAccountMetas[22];
  };
  data: LiquidatePositionFusionInstructionData;
};

export function parseLiquidatePositionFusionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedLiquidatePositionFusionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 23) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      tunaConfig: getNextAccount(),
      mintA: getNextAccount(),
      mintB: getNextAccount(),
      tokenProgramA: getNextAccount(),
      tokenProgramB: getNextAccount(),
      market: getNextAccount(),
      vaultA: getNextAccount(),
      vaultB: getNextAccount(),
      vaultAAta: getNextAccount(),
      vaultBAta: getNextAccount(),
      tunaPosition: getNextAccount(),
      tunaPositionAta: getNextAccount(),
      tunaPositionAtaA: getNextAccount(),
      tunaPositionAtaB: getNextAccount(),
      liquidationFeeRecipientAtaA: getNextAccount(),
      liquidationFeeRecipientAtaB: getNextAccount(),
      pythOraclePriceFeedA: getNextAccount(),
      pythOraclePriceFeedB: getNextAccount(),
      fusionammProgram: getNextAccount(),
      fusionPool: getNextAccount(),
      fusionPosition: getNextAccount(),
      memoProgram: getNextAccount(),
    },
    data: getLiquidatePositionFusionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
