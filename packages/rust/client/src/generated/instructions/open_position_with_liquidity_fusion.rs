//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::RemainingAccountsInfo;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct OpenPositionWithLiquidityFusion {
            /// 
/// TUNA accounts
/// 

    
              
          pub authority: solana_program::pubkey::Pubkey,
          
              
          pub tuna_config: solana_program::pubkey::Pubkey,
          
              
          pub mint_a: solana_program::pubkey::Pubkey,
          
              
          pub mint_b: solana_program::pubkey::Pubkey,
          
              
          pub token_program_a: solana_program::pubkey::Pubkey,
          
              
          pub token_program_b: solana_program::pubkey::Pubkey,
          
              
          pub market: solana_program::pubkey::Pubkey,
          
              
          pub vault_a: solana_program::pubkey::Pubkey,
          
              
          pub vault_b: solana_program::pubkey::Pubkey,
          
              
          pub vault_a_ata: solana_program::pubkey::Pubkey,
          
              
          pub vault_b_ata: solana_program::pubkey::Pubkey,
          
              
          pub tuna_position: solana_program::pubkey::Pubkey,
          
              
          pub tuna_position_mint: solana_program::pubkey::Pubkey,
          
              
          pub tuna_position_ata: solana_program::pubkey::Pubkey,
          
              
          pub tuna_position_ata_a: solana_program::pubkey::Pubkey,
          
              
          pub tuna_position_ata_b: solana_program::pubkey::Pubkey,
          
              
          pub tuna_position_owner_ata_a: solana_program::pubkey::Pubkey,
          
              
          pub tuna_position_owner_ata_b: solana_program::pubkey::Pubkey,
          
              
          pub fee_recipient_ata_a: solana_program::pubkey::Pubkey,
          
              
          pub fee_recipient_ata_b: solana_program::pubkey::Pubkey,
          
              
          pub pyth_oracle_price_feed_a: solana_program::pubkey::Pubkey,
          
              
          pub pyth_oracle_price_feed_b: solana_program::pubkey::Pubkey,
                /// 
/// Fusion accounts
/// 

    
              
          pub fusionamm_program: solana_program::pubkey::Pubkey,
          
              
          pub fusion_pool: solana_program::pubkey::Pubkey,
          
              
          pub fusion_position: solana_program::pubkey::Pubkey,
          
              
          pub metadata_update_auth: solana_program::pubkey::Pubkey,
          
              
          pub memo_program: solana_program::pubkey::Pubkey,
                /// 
/// Other accounts
/// 

    
              
          pub token2022_program: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
          
              
          pub associated_token_program: solana_program::pubkey::Pubkey,
      }

impl OpenPositionWithLiquidityFusion {
  pub fn instruction(&self, args: OpenPositionWithLiquidityFusionInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: OpenPositionWithLiquidityFusionInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(30+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.authority,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.tuna_config,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint_a,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint_b,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program_a,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program_b,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.market,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault_a,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault_b,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault_a_ata,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault_b_ata,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.tuna_position,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.tuna_position_mint,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.tuna_position_ata,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.tuna_position_ata_a,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.tuna_position_ata_b,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.tuna_position_owner_ata_a,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.tuna_position_owner_ata_b,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_recipient_ata_a,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_recipient_ata_b,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pyth_oracle_price_feed_a,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pyth_oracle_price_feed_b,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.fusionamm_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.fusion_pool,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.fusion_position,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.metadata_update_auth,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.memo_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token2022_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&OpenPositionWithLiquidityFusionInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::TUNA_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct OpenPositionWithLiquidityFusionInstructionData {
            discriminator: [u8; 8],
                                                                                    }

impl OpenPositionWithLiquidityFusionInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [123, 115, 192, 91, 113, 191, 73, 56],
                                                                                                                                                                                                        }
  }
}

impl Default for OpenPositionWithLiquidityFusionInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct OpenPositionWithLiquidityFusionInstructionArgs {
                  pub tick_lower_index: i32,
                pub tick_upper_index: i32,
                pub tick_stop_loss_index: i32,
                pub tick_take_profit_index: i32,
                pub flags: u32,
                pub collateral_a: u64,
                pub collateral_b: u64,
                pub borrow_a: u64,
                pub borrow_b: u64,
                pub min_added_amount_a: u64,
                pub min_added_amount_b: u64,
                pub max_swap_slippage: u32,
                pub remaining_accounts_info: RemainingAccountsInfo,
      }


/// Instruction builder for `OpenPositionWithLiquidityFusion`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` authority
          ///   1. `[]` tuna_config
          ///   2. `[]` mint_a
          ///   3. `[]` mint_b
          ///   4. `[]` token_program_a
          ///   5. `[]` token_program_b
                ///   6. `[writable]` market
                ///   7. `[writable]` vault_a
                ///   8. `[writable]` vault_b
                ///   9. `[writable]` vault_a_ata
                ///   10. `[writable]` vault_b_ata
                ///   11. `[writable]` tuna_position
                      ///   12. `[writable, signer]` tuna_position_mint
                ///   13. `[writable]` tuna_position_ata
                ///   14. `[writable]` tuna_position_ata_a
                ///   15. `[writable]` tuna_position_ata_b
                ///   16. `[writable]` tuna_position_owner_ata_a
                ///   17. `[writable]` tuna_position_owner_ata_b
                ///   18. `[writable]` fee_recipient_ata_a
                ///   19. `[writable]` fee_recipient_ata_b
          ///   20. `[]` pyth_oracle_price_feed_a
          ///   21. `[]` pyth_oracle_price_feed_b
          ///   22. `[]` fusionamm_program
                ///   23. `[writable]` fusion_pool
                ///   24. `[writable]` fusion_position
          ///   25. `[]` metadata_update_auth
          ///   26. `[]` memo_program
          ///   27. `[]` token2022_program
                ///   28. `[optional]` system_program (default to `11111111111111111111111111111111`)
          ///   29. `[]` associated_token_program
#[derive(Clone, Debug, Default)]
pub struct OpenPositionWithLiquidityFusionBuilder {
            authority: Option<solana_program::pubkey::Pubkey>,
                tuna_config: Option<solana_program::pubkey::Pubkey>,
                mint_a: Option<solana_program::pubkey::Pubkey>,
                mint_b: Option<solana_program::pubkey::Pubkey>,
                token_program_a: Option<solana_program::pubkey::Pubkey>,
                token_program_b: Option<solana_program::pubkey::Pubkey>,
                market: Option<solana_program::pubkey::Pubkey>,
                vault_a: Option<solana_program::pubkey::Pubkey>,
                vault_b: Option<solana_program::pubkey::Pubkey>,
                vault_a_ata: Option<solana_program::pubkey::Pubkey>,
                vault_b_ata: Option<solana_program::pubkey::Pubkey>,
                tuna_position: Option<solana_program::pubkey::Pubkey>,
                tuna_position_mint: Option<solana_program::pubkey::Pubkey>,
                tuna_position_ata: Option<solana_program::pubkey::Pubkey>,
                tuna_position_ata_a: Option<solana_program::pubkey::Pubkey>,
                tuna_position_ata_b: Option<solana_program::pubkey::Pubkey>,
                tuna_position_owner_ata_a: Option<solana_program::pubkey::Pubkey>,
                tuna_position_owner_ata_b: Option<solana_program::pubkey::Pubkey>,
                fee_recipient_ata_a: Option<solana_program::pubkey::Pubkey>,
                fee_recipient_ata_b: Option<solana_program::pubkey::Pubkey>,
                pyth_oracle_price_feed_a: Option<solana_program::pubkey::Pubkey>,
                pyth_oracle_price_feed_b: Option<solana_program::pubkey::Pubkey>,
                fusionamm_program: Option<solana_program::pubkey::Pubkey>,
                fusion_pool: Option<solana_program::pubkey::Pubkey>,
                fusion_position: Option<solana_program::pubkey::Pubkey>,
                metadata_update_auth: Option<solana_program::pubkey::Pubkey>,
                memo_program: Option<solana_program::pubkey::Pubkey>,
                token2022_program: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                associated_token_program: Option<solana_program::pubkey::Pubkey>,
                        tick_lower_index: Option<i32>,
                tick_upper_index: Option<i32>,
                tick_stop_loss_index: Option<i32>,
                tick_take_profit_index: Option<i32>,
                flags: Option<u32>,
                collateral_a: Option<u64>,
                collateral_b: Option<u64>,
                borrow_a: Option<u64>,
                borrow_b: Option<u64>,
                min_added_amount_a: Option<u64>,
                min_added_amount_b: Option<u64>,
                max_swap_slippage: Option<u32>,
                remaining_accounts_info: Option<RemainingAccountsInfo>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl OpenPositionWithLiquidityFusionBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            /// 
/// TUNA accounts
/// 
#[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.authority = Some(authority);
                    self
    }
            #[inline(always)]
    pub fn tuna_config(&mut self, tuna_config: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.tuna_config = Some(tuna_config);
                    self
    }
            #[inline(always)]
    pub fn mint_a(&mut self, mint_a: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.mint_a = Some(mint_a);
                    self
    }
            #[inline(always)]
    pub fn mint_b(&mut self, mint_b: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.mint_b = Some(mint_b);
                    self
    }
            #[inline(always)]
    pub fn token_program_a(&mut self, token_program_a: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_program_a = Some(token_program_a);
                    self
    }
            #[inline(always)]
    pub fn token_program_b(&mut self, token_program_b: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_program_b = Some(token_program_b);
                    self
    }
            #[inline(always)]
    pub fn market(&mut self, market: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.market = Some(market);
                    self
    }
            #[inline(always)]
    pub fn vault_a(&mut self, vault_a: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.vault_a = Some(vault_a);
                    self
    }
            #[inline(always)]
    pub fn vault_b(&mut self, vault_b: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.vault_b = Some(vault_b);
                    self
    }
            #[inline(always)]
    pub fn vault_a_ata(&mut self, vault_a_ata: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.vault_a_ata = Some(vault_a_ata);
                    self
    }
            #[inline(always)]
    pub fn vault_b_ata(&mut self, vault_b_ata: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.vault_b_ata = Some(vault_b_ata);
                    self
    }
            #[inline(always)]
    pub fn tuna_position(&mut self, tuna_position: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.tuna_position = Some(tuna_position);
                    self
    }
            #[inline(always)]
    pub fn tuna_position_mint(&mut self, tuna_position_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.tuna_position_mint = Some(tuna_position_mint);
                    self
    }
            #[inline(always)]
    pub fn tuna_position_ata(&mut self, tuna_position_ata: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.tuna_position_ata = Some(tuna_position_ata);
                    self
    }
            #[inline(always)]
    pub fn tuna_position_ata_a(&mut self, tuna_position_ata_a: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.tuna_position_ata_a = Some(tuna_position_ata_a);
                    self
    }
            #[inline(always)]
    pub fn tuna_position_ata_b(&mut self, tuna_position_ata_b: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.tuna_position_ata_b = Some(tuna_position_ata_b);
                    self
    }
            #[inline(always)]
    pub fn tuna_position_owner_ata_a(&mut self, tuna_position_owner_ata_a: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.tuna_position_owner_ata_a = Some(tuna_position_owner_ata_a);
                    self
    }
            #[inline(always)]
    pub fn tuna_position_owner_ata_b(&mut self, tuna_position_owner_ata_b: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.tuna_position_owner_ata_b = Some(tuna_position_owner_ata_b);
                    self
    }
            #[inline(always)]
    pub fn fee_recipient_ata_a(&mut self, fee_recipient_ata_a: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.fee_recipient_ata_a = Some(fee_recipient_ata_a);
                    self
    }
            #[inline(always)]
    pub fn fee_recipient_ata_b(&mut self, fee_recipient_ata_b: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.fee_recipient_ata_b = Some(fee_recipient_ata_b);
                    self
    }
            #[inline(always)]
    pub fn pyth_oracle_price_feed_a(&mut self, pyth_oracle_price_feed_a: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.pyth_oracle_price_feed_a = Some(pyth_oracle_price_feed_a);
                    self
    }
            #[inline(always)]
    pub fn pyth_oracle_price_feed_b(&mut self, pyth_oracle_price_feed_b: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.pyth_oracle_price_feed_b = Some(pyth_oracle_price_feed_b);
                    self
    }
            /// 
/// Fusion accounts
/// 
#[inline(always)]
    pub fn fusionamm_program(&mut self, fusionamm_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.fusionamm_program = Some(fusionamm_program);
                    self
    }
            #[inline(always)]
    pub fn fusion_pool(&mut self, fusion_pool: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.fusion_pool = Some(fusion_pool);
                    self
    }
            #[inline(always)]
    pub fn fusion_position(&mut self, fusion_position: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.fusion_position = Some(fusion_position);
                    self
    }
            #[inline(always)]
    pub fn metadata_update_auth(&mut self, metadata_update_auth: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.metadata_update_auth = Some(metadata_update_auth);
                    self
    }
            #[inline(always)]
    pub fn memo_program(&mut self, memo_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.memo_program = Some(memo_program);
                    self
    }
            /// 
/// Other accounts
/// 
#[inline(always)]
    pub fn token2022_program(&mut self, token2022_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token2022_program = Some(token2022_program);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            #[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.associated_token_program = Some(associated_token_program);
                    self
    }
                    #[inline(always)]
      pub fn tick_lower_index(&mut self, tick_lower_index: i32) -> &mut Self {
        self.tick_lower_index = Some(tick_lower_index);
        self
      }
                #[inline(always)]
      pub fn tick_upper_index(&mut self, tick_upper_index: i32) -> &mut Self {
        self.tick_upper_index = Some(tick_upper_index);
        self
      }
                #[inline(always)]
      pub fn tick_stop_loss_index(&mut self, tick_stop_loss_index: i32) -> &mut Self {
        self.tick_stop_loss_index = Some(tick_stop_loss_index);
        self
      }
                #[inline(always)]
      pub fn tick_take_profit_index(&mut self, tick_take_profit_index: i32) -> &mut Self {
        self.tick_take_profit_index = Some(tick_take_profit_index);
        self
      }
                #[inline(always)]
      pub fn flags(&mut self, flags: u32) -> &mut Self {
        self.flags = Some(flags);
        self
      }
                #[inline(always)]
      pub fn collateral_a(&mut self, collateral_a: u64) -> &mut Self {
        self.collateral_a = Some(collateral_a);
        self
      }
                #[inline(always)]
      pub fn collateral_b(&mut self, collateral_b: u64) -> &mut Self {
        self.collateral_b = Some(collateral_b);
        self
      }
                #[inline(always)]
      pub fn borrow_a(&mut self, borrow_a: u64) -> &mut Self {
        self.borrow_a = Some(borrow_a);
        self
      }
                #[inline(always)]
      pub fn borrow_b(&mut self, borrow_b: u64) -> &mut Self {
        self.borrow_b = Some(borrow_b);
        self
      }
                #[inline(always)]
      pub fn min_added_amount_a(&mut self, min_added_amount_a: u64) -> &mut Self {
        self.min_added_amount_a = Some(min_added_amount_a);
        self
      }
                #[inline(always)]
      pub fn min_added_amount_b(&mut self, min_added_amount_b: u64) -> &mut Self {
        self.min_added_amount_b = Some(min_added_amount_b);
        self
      }
                #[inline(always)]
      pub fn max_swap_slippage(&mut self, max_swap_slippage: u32) -> &mut Self {
        self.max_swap_slippage = Some(max_swap_slippage);
        self
      }
                #[inline(always)]
      pub fn remaining_accounts_info(&mut self, remaining_accounts_info: RemainingAccountsInfo) -> &mut Self {
        self.remaining_accounts_info = Some(remaining_accounts_info);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = OpenPositionWithLiquidityFusion {
                              authority: self.authority.expect("authority is not set"),
                                        tuna_config: self.tuna_config.expect("tuna_config is not set"),
                                        mint_a: self.mint_a.expect("mint_a is not set"),
                                        mint_b: self.mint_b.expect("mint_b is not set"),
                                        token_program_a: self.token_program_a.expect("token_program_a is not set"),
                                        token_program_b: self.token_program_b.expect("token_program_b is not set"),
                                        market: self.market.expect("market is not set"),
                                        vault_a: self.vault_a.expect("vault_a is not set"),
                                        vault_b: self.vault_b.expect("vault_b is not set"),
                                        vault_a_ata: self.vault_a_ata.expect("vault_a_ata is not set"),
                                        vault_b_ata: self.vault_b_ata.expect("vault_b_ata is not set"),
                                        tuna_position: self.tuna_position.expect("tuna_position is not set"),
                                        tuna_position_mint: self.tuna_position_mint.expect("tuna_position_mint is not set"),
                                        tuna_position_ata: self.tuna_position_ata.expect("tuna_position_ata is not set"),
                                        tuna_position_ata_a: self.tuna_position_ata_a.expect("tuna_position_ata_a is not set"),
                                        tuna_position_ata_b: self.tuna_position_ata_b.expect("tuna_position_ata_b is not set"),
                                        tuna_position_owner_ata_a: self.tuna_position_owner_ata_a.expect("tuna_position_owner_ata_a is not set"),
                                        tuna_position_owner_ata_b: self.tuna_position_owner_ata_b.expect("tuna_position_owner_ata_b is not set"),
                                        fee_recipient_ata_a: self.fee_recipient_ata_a.expect("fee_recipient_ata_a is not set"),
                                        fee_recipient_ata_b: self.fee_recipient_ata_b.expect("fee_recipient_ata_b is not set"),
                                        pyth_oracle_price_feed_a: self.pyth_oracle_price_feed_a.expect("pyth_oracle_price_feed_a is not set"),
                                        pyth_oracle_price_feed_b: self.pyth_oracle_price_feed_b.expect("pyth_oracle_price_feed_b is not set"),
                                        fusionamm_program: self.fusionamm_program.expect("fusionamm_program is not set"),
                                        fusion_pool: self.fusion_pool.expect("fusion_pool is not set"),
                                        fusion_position: self.fusion_position.expect("fusion_position is not set"),
                                        metadata_update_auth: self.metadata_update_auth.expect("metadata_update_auth is not set"),
                                        memo_program: self.memo_program.expect("memo_program is not set"),
                                        token2022_program: self.token2022_program.expect("token2022_program is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                                        associated_token_program: self.associated_token_program.expect("associated_token_program is not set"),
                      };
          let args = OpenPositionWithLiquidityFusionInstructionArgs {
                                                              tick_lower_index: self.tick_lower_index.clone().expect("tick_lower_index is not set"),
                                                                  tick_upper_index: self.tick_upper_index.clone().expect("tick_upper_index is not set"),
                                                                  tick_stop_loss_index: self.tick_stop_loss_index.clone().expect("tick_stop_loss_index is not set"),
                                                                  tick_take_profit_index: self.tick_take_profit_index.clone().expect("tick_take_profit_index is not set"),
                                                                  flags: self.flags.clone().expect("flags is not set"),
                                                                  collateral_a: self.collateral_a.clone().expect("collateral_a is not set"),
                                                                  collateral_b: self.collateral_b.clone().expect("collateral_b is not set"),
                                                                  borrow_a: self.borrow_a.clone().expect("borrow_a is not set"),
                                                                  borrow_b: self.borrow_b.clone().expect("borrow_b is not set"),
                                                                  min_added_amount_a: self.min_added_amount_a.clone().expect("min_added_amount_a is not set"),
                                                                  min_added_amount_b: self.min_added_amount_b.clone().expect("min_added_amount_b is not set"),
                                                                  max_swap_slippage: self.max_swap_slippage.clone().expect("max_swap_slippage is not set"),
                                                                  remaining_accounts_info: self.remaining_accounts_info.clone().expect("remaining_accounts_info is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `open_position_with_liquidity_fusion` CPI accounts.
  pub struct OpenPositionWithLiquidityFusionCpiAccounts<'a, 'b> {
                  /// 
/// TUNA accounts
/// 

      
                    
              pub authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub tuna_config: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub mint_a: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub mint_b: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_program_a: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_program_b: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub market: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub vault_a: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub vault_b: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub vault_a_ata: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub vault_b_ata: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub tuna_position: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub tuna_position_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub tuna_position_ata: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub tuna_position_ata_a: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub tuna_position_ata_b: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub tuna_position_owner_ata_a: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub tuna_position_owner_ata_b: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub fee_recipient_ata_a: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub fee_recipient_ata_b: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub pyth_oracle_price_feed_a: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub pyth_oracle_price_feed_b: &'b solana_program::account_info::AccountInfo<'a>,
                        /// 
/// Fusion accounts
/// 

      
                    
              pub fusionamm_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub fusion_pool: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub fusion_position: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub metadata_update_auth: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub memo_program: &'b solana_program::account_info::AccountInfo<'a>,
                        /// 
/// Other accounts
/// 

      
                    
              pub token2022_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `open_position_with_liquidity_fusion` CPI instruction.
pub struct OpenPositionWithLiquidityFusionCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
            /// 
/// TUNA accounts
/// 

    
              
          pub authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub tuna_config: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub mint_a: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub mint_b: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_program_a: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_program_b: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub market: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub vault_a: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub vault_b: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub vault_a_ata: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub vault_b_ata: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub tuna_position: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub tuna_position_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub tuna_position_ata: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub tuna_position_ata_a: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub tuna_position_ata_b: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub tuna_position_owner_ata_a: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub tuna_position_owner_ata_b: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub fee_recipient_ata_a: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub fee_recipient_ata_b: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub pyth_oracle_price_feed_a: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub pyth_oracle_price_feed_b: &'b solana_program::account_info::AccountInfo<'a>,
                /// 
/// Fusion accounts
/// 

    
              
          pub fusionamm_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub fusion_pool: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub fusion_position: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub metadata_update_auth: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub memo_program: &'b solana_program::account_info::AccountInfo<'a>,
                /// 
/// Other accounts
/// 

    
              
          pub token2022_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: OpenPositionWithLiquidityFusionInstructionArgs,
  }

impl<'a, 'b> OpenPositionWithLiquidityFusionCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: OpenPositionWithLiquidityFusionCpiAccounts<'a, 'b>,
              args: OpenPositionWithLiquidityFusionInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              authority: accounts.authority,
              tuna_config: accounts.tuna_config,
              mint_a: accounts.mint_a,
              mint_b: accounts.mint_b,
              token_program_a: accounts.token_program_a,
              token_program_b: accounts.token_program_b,
              market: accounts.market,
              vault_a: accounts.vault_a,
              vault_b: accounts.vault_b,
              vault_a_ata: accounts.vault_a_ata,
              vault_b_ata: accounts.vault_b_ata,
              tuna_position: accounts.tuna_position,
              tuna_position_mint: accounts.tuna_position_mint,
              tuna_position_ata: accounts.tuna_position_ata,
              tuna_position_ata_a: accounts.tuna_position_ata_a,
              tuna_position_ata_b: accounts.tuna_position_ata_b,
              tuna_position_owner_ata_a: accounts.tuna_position_owner_ata_a,
              tuna_position_owner_ata_b: accounts.tuna_position_owner_ata_b,
              fee_recipient_ata_a: accounts.fee_recipient_ata_a,
              fee_recipient_ata_b: accounts.fee_recipient_ata_b,
              pyth_oracle_price_feed_a: accounts.pyth_oracle_price_feed_a,
              pyth_oracle_price_feed_b: accounts.pyth_oracle_price_feed_b,
              fusionamm_program: accounts.fusionamm_program,
              fusion_pool: accounts.fusion_pool,
              fusion_position: accounts.fusion_position,
              metadata_update_auth: accounts.metadata_update_auth,
              memo_program: accounts.memo_program,
              token2022_program: accounts.token2022_program,
              system_program: accounts.system_program,
              associated_token_program: accounts.associated_token_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(30+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.authority.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.tuna_config.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint_a.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint_b.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program_a.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program_b.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault_a.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault_b.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault_a_ata.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault_b_ata.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tuna_position.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tuna_position_mint.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tuna_position_ata.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tuna_position_ata_a.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tuna_position_ata_b.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tuna_position_owner_ata_a.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tuna_position_owner_ata_b.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_recipient_ata_a.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_recipient_ata_b.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pyth_oracle_price_feed_a.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pyth_oracle_price_feed_b.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.fusionamm_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fusion_pool.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fusion_position.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.metadata_update_auth.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.memo_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token2022_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&OpenPositionWithLiquidityFusionInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::TUNA_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(31 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.authority.clone());
                        account_infos.push(self.tuna_config.clone());
                        account_infos.push(self.mint_a.clone());
                        account_infos.push(self.mint_b.clone());
                        account_infos.push(self.token_program_a.clone());
                        account_infos.push(self.token_program_b.clone());
                        account_infos.push(self.market.clone());
                        account_infos.push(self.vault_a.clone());
                        account_infos.push(self.vault_b.clone());
                        account_infos.push(self.vault_a_ata.clone());
                        account_infos.push(self.vault_b_ata.clone());
                        account_infos.push(self.tuna_position.clone());
                        account_infos.push(self.tuna_position_mint.clone());
                        account_infos.push(self.tuna_position_ata.clone());
                        account_infos.push(self.tuna_position_ata_a.clone());
                        account_infos.push(self.tuna_position_ata_b.clone());
                        account_infos.push(self.tuna_position_owner_ata_a.clone());
                        account_infos.push(self.tuna_position_owner_ata_b.clone());
                        account_infos.push(self.fee_recipient_ata_a.clone());
                        account_infos.push(self.fee_recipient_ata_b.clone());
                        account_infos.push(self.pyth_oracle_price_feed_a.clone());
                        account_infos.push(self.pyth_oracle_price_feed_b.clone());
                        account_infos.push(self.fusionamm_program.clone());
                        account_infos.push(self.fusion_pool.clone());
                        account_infos.push(self.fusion_position.clone());
                        account_infos.push(self.metadata_update_auth.clone());
                        account_infos.push(self.memo_program.clone());
                        account_infos.push(self.token2022_program.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.associated_token_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `OpenPositionWithLiquidityFusion` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` authority
          ///   1. `[]` tuna_config
          ///   2. `[]` mint_a
          ///   3. `[]` mint_b
          ///   4. `[]` token_program_a
          ///   5. `[]` token_program_b
                ///   6. `[writable]` market
                ///   7. `[writable]` vault_a
                ///   8. `[writable]` vault_b
                ///   9. `[writable]` vault_a_ata
                ///   10. `[writable]` vault_b_ata
                ///   11. `[writable]` tuna_position
                      ///   12. `[writable, signer]` tuna_position_mint
                ///   13. `[writable]` tuna_position_ata
                ///   14. `[writable]` tuna_position_ata_a
                ///   15. `[writable]` tuna_position_ata_b
                ///   16. `[writable]` tuna_position_owner_ata_a
                ///   17. `[writable]` tuna_position_owner_ata_b
                ///   18. `[writable]` fee_recipient_ata_a
                ///   19. `[writable]` fee_recipient_ata_b
          ///   20. `[]` pyth_oracle_price_feed_a
          ///   21. `[]` pyth_oracle_price_feed_b
          ///   22. `[]` fusionamm_program
                ///   23. `[writable]` fusion_pool
                ///   24. `[writable]` fusion_position
          ///   25. `[]` metadata_update_auth
          ///   26. `[]` memo_program
          ///   27. `[]` token2022_program
          ///   28. `[]` system_program
          ///   29. `[]` associated_token_program
#[derive(Clone, Debug)]
pub struct OpenPositionWithLiquidityFusionCpiBuilder<'a, 'b> {
  instruction: Box<OpenPositionWithLiquidityFusionCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> OpenPositionWithLiquidityFusionCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(OpenPositionWithLiquidityFusionCpiBuilderInstruction {
      __program: program,
              authority: None,
              tuna_config: None,
              mint_a: None,
              mint_b: None,
              token_program_a: None,
              token_program_b: None,
              market: None,
              vault_a: None,
              vault_b: None,
              vault_a_ata: None,
              vault_b_ata: None,
              tuna_position: None,
              tuna_position_mint: None,
              tuna_position_ata: None,
              tuna_position_ata_a: None,
              tuna_position_ata_b: None,
              tuna_position_owner_ata_a: None,
              tuna_position_owner_ata_b: None,
              fee_recipient_ata_a: None,
              fee_recipient_ata_b: None,
              pyth_oracle_price_feed_a: None,
              pyth_oracle_price_feed_b: None,
              fusionamm_program: None,
              fusion_pool: None,
              fusion_position: None,
              metadata_update_auth: None,
              memo_program: None,
              token2022_program: None,
              system_program: None,
              associated_token_program: None,
                                            tick_lower_index: None,
                                tick_upper_index: None,
                                tick_stop_loss_index: None,
                                tick_take_profit_index: None,
                                flags: None,
                                collateral_a: None,
                                collateral_b: None,
                                borrow_a: None,
                                borrow_b: None,
                                min_added_amount_a: None,
                                min_added_amount_b: None,
                                max_swap_slippage: None,
                                remaining_accounts_info: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      /// 
/// TUNA accounts
/// 
#[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authority = Some(authority);
                    self
    }
      #[inline(always)]
    pub fn tuna_config(&mut self, tuna_config: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.tuna_config = Some(tuna_config);
                    self
    }
      #[inline(always)]
    pub fn mint_a(&mut self, mint_a: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.mint_a = Some(mint_a);
                    self
    }
      #[inline(always)]
    pub fn mint_b(&mut self, mint_b: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.mint_b = Some(mint_b);
                    self
    }
      #[inline(always)]
    pub fn token_program_a(&mut self, token_program_a: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program_a = Some(token_program_a);
                    self
    }
      #[inline(always)]
    pub fn token_program_b(&mut self, token_program_b: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program_b = Some(token_program_b);
                    self
    }
      #[inline(always)]
    pub fn market(&mut self, market: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.market = Some(market);
                    self
    }
      #[inline(always)]
    pub fn vault_a(&mut self, vault_a: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.vault_a = Some(vault_a);
                    self
    }
      #[inline(always)]
    pub fn vault_b(&mut self, vault_b: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.vault_b = Some(vault_b);
                    self
    }
      #[inline(always)]
    pub fn vault_a_ata(&mut self, vault_a_ata: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.vault_a_ata = Some(vault_a_ata);
                    self
    }
      #[inline(always)]
    pub fn vault_b_ata(&mut self, vault_b_ata: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.vault_b_ata = Some(vault_b_ata);
                    self
    }
      #[inline(always)]
    pub fn tuna_position(&mut self, tuna_position: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.tuna_position = Some(tuna_position);
                    self
    }
      #[inline(always)]
    pub fn tuna_position_mint(&mut self, tuna_position_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.tuna_position_mint = Some(tuna_position_mint);
                    self
    }
      #[inline(always)]
    pub fn tuna_position_ata(&mut self, tuna_position_ata: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.tuna_position_ata = Some(tuna_position_ata);
                    self
    }
      #[inline(always)]
    pub fn tuna_position_ata_a(&mut self, tuna_position_ata_a: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.tuna_position_ata_a = Some(tuna_position_ata_a);
                    self
    }
      #[inline(always)]
    pub fn tuna_position_ata_b(&mut self, tuna_position_ata_b: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.tuna_position_ata_b = Some(tuna_position_ata_b);
                    self
    }
      #[inline(always)]
    pub fn tuna_position_owner_ata_a(&mut self, tuna_position_owner_ata_a: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.tuna_position_owner_ata_a = Some(tuna_position_owner_ata_a);
                    self
    }
      #[inline(always)]
    pub fn tuna_position_owner_ata_b(&mut self, tuna_position_owner_ata_b: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.tuna_position_owner_ata_b = Some(tuna_position_owner_ata_b);
                    self
    }
      #[inline(always)]
    pub fn fee_recipient_ata_a(&mut self, fee_recipient_ata_a: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.fee_recipient_ata_a = Some(fee_recipient_ata_a);
                    self
    }
      #[inline(always)]
    pub fn fee_recipient_ata_b(&mut self, fee_recipient_ata_b: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.fee_recipient_ata_b = Some(fee_recipient_ata_b);
                    self
    }
      #[inline(always)]
    pub fn pyth_oracle_price_feed_a(&mut self, pyth_oracle_price_feed_a: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.pyth_oracle_price_feed_a = Some(pyth_oracle_price_feed_a);
                    self
    }
      #[inline(always)]
    pub fn pyth_oracle_price_feed_b(&mut self, pyth_oracle_price_feed_b: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.pyth_oracle_price_feed_b = Some(pyth_oracle_price_feed_b);
                    self
    }
      /// 
/// Fusion accounts
/// 
#[inline(always)]
    pub fn fusionamm_program(&mut self, fusionamm_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.fusionamm_program = Some(fusionamm_program);
                    self
    }
      #[inline(always)]
    pub fn fusion_pool(&mut self, fusion_pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.fusion_pool = Some(fusion_pool);
                    self
    }
      #[inline(always)]
    pub fn fusion_position(&mut self, fusion_position: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.fusion_position = Some(fusion_position);
                    self
    }
      #[inline(always)]
    pub fn metadata_update_auth(&mut self, metadata_update_auth: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.metadata_update_auth = Some(metadata_update_auth);
                    self
    }
      #[inline(always)]
    pub fn memo_program(&mut self, memo_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.memo_program = Some(memo_program);
                    self
    }
      /// 
/// Other accounts
/// 
#[inline(always)]
    pub fn token2022_program(&mut self, token2022_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token2022_program = Some(token2022_program);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.associated_token_program = Some(associated_token_program);
                    self
    }
                    #[inline(always)]
      pub fn tick_lower_index(&mut self, tick_lower_index: i32) -> &mut Self {
        self.instruction.tick_lower_index = Some(tick_lower_index);
        self
      }
                #[inline(always)]
      pub fn tick_upper_index(&mut self, tick_upper_index: i32) -> &mut Self {
        self.instruction.tick_upper_index = Some(tick_upper_index);
        self
      }
                #[inline(always)]
      pub fn tick_stop_loss_index(&mut self, tick_stop_loss_index: i32) -> &mut Self {
        self.instruction.tick_stop_loss_index = Some(tick_stop_loss_index);
        self
      }
                #[inline(always)]
      pub fn tick_take_profit_index(&mut self, tick_take_profit_index: i32) -> &mut Self {
        self.instruction.tick_take_profit_index = Some(tick_take_profit_index);
        self
      }
                #[inline(always)]
      pub fn flags(&mut self, flags: u32) -> &mut Self {
        self.instruction.flags = Some(flags);
        self
      }
                #[inline(always)]
      pub fn collateral_a(&mut self, collateral_a: u64) -> &mut Self {
        self.instruction.collateral_a = Some(collateral_a);
        self
      }
                #[inline(always)]
      pub fn collateral_b(&mut self, collateral_b: u64) -> &mut Self {
        self.instruction.collateral_b = Some(collateral_b);
        self
      }
                #[inline(always)]
      pub fn borrow_a(&mut self, borrow_a: u64) -> &mut Self {
        self.instruction.borrow_a = Some(borrow_a);
        self
      }
                #[inline(always)]
      pub fn borrow_b(&mut self, borrow_b: u64) -> &mut Self {
        self.instruction.borrow_b = Some(borrow_b);
        self
      }
                #[inline(always)]
      pub fn min_added_amount_a(&mut self, min_added_amount_a: u64) -> &mut Self {
        self.instruction.min_added_amount_a = Some(min_added_amount_a);
        self
      }
                #[inline(always)]
      pub fn min_added_amount_b(&mut self, min_added_amount_b: u64) -> &mut Self {
        self.instruction.min_added_amount_b = Some(min_added_amount_b);
        self
      }
                #[inline(always)]
      pub fn max_swap_slippage(&mut self, max_swap_slippage: u32) -> &mut Self {
        self.instruction.max_swap_slippage = Some(max_swap_slippage);
        self
      }
                #[inline(always)]
      pub fn remaining_accounts_info(&mut self, remaining_accounts_info: RemainingAccountsInfo) -> &mut Self {
        self.instruction.remaining_accounts_info = Some(remaining_accounts_info);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = OpenPositionWithLiquidityFusionInstructionArgs {
                                                              tick_lower_index: self.instruction.tick_lower_index.clone().expect("tick_lower_index is not set"),
                                                                  tick_upper_index: self.instruction.tick_upper_index.clone().expect("tick_upper_index is not set"),
                                                                  tick_stop_loss_index: self.instruction.tick_stop_loss_index.clone().expect("tick_stop_loss_index is not set"),
                                                                  tick_take_profit_index: self.instruction.tick_take_profit_index.clone().expect("tick_take_profit_index is not set"),
                                                                  flags: self.instruction.flags.clone().expect("flags is not set"),
                                                                  collateral_a: self.instruction.collateral_a.clone().expect("collateral_a is not set"),
                                                                  collateral_b: self.instruction.collateral_b.clone().expect("collateral_b is not set"),
                                                                  borrow_a: self.instruction.borrow_a.clone().expect("borrow_a is not set"),
                                                                  borrow_b: self.instruction.borrow_b.clone().expect("borrow_b is not set"),
                                                                  min_added_amount_a: self.instruction.min_added_amount_a.clone().expect("min_added_amount_a is not set"),
                                                                  min_added_amount_b: self.instruction.min_added_amount_b.clone().expect("min_added_amount_b is not set"),
                                                                  max_swap_slippage: self.instruction.max_swap_slippage.clone().expect("max_swap_slippage is not set"),
                                                                  remaining_accounts_info: self.instruction.remaining_accounts_info.clone().expect("remaining_accounts_info is not set"),
                                    };
        let instruction = OpenPositionWithLiquidityFusionCpi {
        __program: self.instruction.__program,
                  
          authority: self.instruction.authority.expect("authority is not set"),
                  
          tuna_config: self.instruction.tuna_config.expect("tuna_config is not set"),
                  
          mint_a: self.instruction.mint_a.expect("mint_a is not set"),
                  
          mint_b: self.instruction.mint_b.expect("mint_b is not set"),
                  
          token_program_a: self.instruction.token_program_a.expect("token_program_a is not set"),
                  
          token_program_b: self.instruction.token_program_b.expect("token_program_b is not set"),
                  
          market: self.instruction.market.expect("market is not set"),
                  
          vault_a: self.instruction.vault_a.expect("vault_a is not set"),
                  
          vault_b: self.instruction.vault_b.expect("vault_b is not set"),
                  
          vault_a_ata: self.instruction.vault_a_ata.expect("vault_a_ata is not set"),
                  
          vault_b_ata: self.instruction.vault_b_ata.expect("vault_b_ata is not set"),
                  
          tuna_position: self.instruction.tuna_position.expect("tuna_position is not set"),
                  
          tuna_position_mint: self.instruction.tuna_position_mint.expect("tuna_position_mint is not set"),
                  
          tuna_position_ata: self.instruction.tuna_position_ata.expect("tuna_position_ata is not set"),
                  
          tuna_position_ata_a: self.instruction.tuna_position_ata_a.expect("tuna_position_ata_a is not set"),
                  
          tuna_position_ata_b: self.instruction.tuna_position_ata_b.expect("tuna_position_ata_b is not set"),
                  
          tuna_position_owner_ata_a: self.instruction.tuna_position_owner_ata_a.expect("tuna_position_owner_ata_a is not set"),
                  
          tuna_position_owner_ata_b: self.instruction.tuna_position_owner_ata_b.expect("tuna_position_owner_ata_b is not set"),
                  
          fee_recipient_ata_a: self.instruction.fee_recipient_ata_a.expect("fee_recipient_ata_a is not set"),
                  
          fee_recipient_ata_b: self.instruction.fee_recipient_ata_b.expect("fee_recipient_ata_b is not set"),
                  
          pyth_oracle_price_feed_a: self.instruction.pyth_oracle_price_feed_a.expect("pyth_oracle_price_feed_a is not set"),
                  
          pyth_oracle_price_feed_b: self.instruction.pyth_oracle_price_feed_b.expect("pyth_oracle_price_feed_b is not set"),
                  
          fusionamm_program: self.instruction.fusionamm_program.expect("fusionamm_program is not set"),
                  
          fusion_pool: self.instruction.fusion_pool.expect("fusion_pool is not set"),
                  
          fusion_position: self.instruction.fusion_position.expect("fusion_position is not set"),
                  
          metadata_update_auth: self.instruction.metadata_update_auth.expect("metadata_update_auth is not set"),
                  
          memo_program: self.instruction.memo_program.expect("memo_program is not set"),
                  
          token2022_program: self.instruction.token2022_program.expect("token2022_program is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          associated_token_program: self.instruction.associated_token_program.expect("associated_token_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct OpenPositionWithLiquidityFusionCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                tuna_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                mint_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                mint_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_program_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_program_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                vault_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                vault_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                vault_a_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                vault_b_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                tuna_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                tuna_position_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                tuna_position_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                tuna_position_ata_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                tuna_position_ata_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                tuna_position_owner_ata_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                tuna_position_owner_ata_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                fee_recipient_ata_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                fee_recipient_ata_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                pyth_oracle_price_feed_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                pyth_oracle_price_feed_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                fusionamm_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                fusion_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                fusion_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                metadata_update_auth: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                memo_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token2022_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        tick_lower_index: Option<i32>,
                tick_upper_index: Option<i32>,
                tick_stop_loss_index: Option<i32>,
                tick_take_profit_index: Option<i32>,
                flags: Option<u32>,
                collateral_a: Option<u64>,
                collateral_b: Option<u64>,
                borrow_a: Option<u64>,
                borrow_b: Option<u64>,
                min_added_amount_a: Option<u64>,
                min_added_amount_b: Option<u64>,
                max_swap_slippage: Option<u32>,
                remaining_accounts_info: Option<RemainingAccountsInfo>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

